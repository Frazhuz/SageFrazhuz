require('dotenv').config();
const { REST, Routes } = require('discord.js');

const DISCORD_TOKEN = process.env.DISCORD_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID;

if (!DISCORD_TOKEN || !CLIENT_ID) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã DISCORD_TOKEN –∏–ª–∏ CLIENT_ID –≤ .env');
    process.exit(1);
}

const args = process.argv.slice(2);

const isGlobal = args.includes("--global");
if (!isGlobal && !GUILD_ID) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω GUILD_ID –≤ .env');
    process.exit(1);
}                             


if (args.length === 0) {
    console.info(`node register.js <–∏–º—è_–∫–æ–º–∞–Ω–¥—ã>:"–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
                 ;<–∏–º—è_–æ–ø—Ü–∏–∏>:"–û–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ü–∏–∏":<—Ç–∏–ø>:<true|false>[:autocomplete][:key1=–ù–∞–∑–≤–∞–Ω–∏–µ1,key2=–ù–∞–∑–≤–∞–Ω–∏–µ2][:min=–ß–∏—Å–ª–æ][:max=–ß–∏—Å–ª–æ][:minLength=N][:maxLength=N]
                 ... --global
    `);
    console.info(`–ü—Ä–∏–º–µ—Ä: node register.js color:"–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç"
    ;shade:"–û—Ç—Ç–µ–Ω–æ–∫":string:true:light=–°–≤–µ—Ç–ª—ã–π,dark=–¢—ë–º–Ω—ã–π
    ;customColor:"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π HEX":string:false:minLength=3:maxLength=7
    ;format:"–§–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞":string:true:autocomplete
    --global
    `);
    process.exit(1);
}


const commandArgs = isGlobal ? args.filter(arg => arg !== '--global") : args;

const optionTypeMap = {
    string: ApplicationCommandOptionType.String,
    integer: ApplicationCommandOptionType.Integer,
    boolean: ApplicationCommandOptionType.Boolean,
    user: ApplicationCommandOptionType.User,
    channel: ApplicationCommandOptionType.Channel,
    role: ApplicationCommandOptionType.Role,
    mentionable: ApplicationCommandOptionType.Mentionable,
    number: ApplicationCommandOptionType.Number,
};

    
const commands = commandArgs.map(arg => {
    const parts = arg.split(';').map(p => p.trim());

    if (parts.length === 0 || !parts[0]) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: "${arg}"`);
        process.exit(1);
    }

    // –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å ‚Äî –∫–æ–º–∞–Ω–¥–∞:–æ–ø–∏—Å–∞–Ω–∏–µ
    const [nameDesc, ...optionParts] = parts;
    const separatorIndex = nameDesc.indexOf(':');

    if (separatorIndex === -1) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: –£ –∫–æ–º–∞–Ω–¥—ã "${nameDesc}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ`);
        process.exit(1);
    }

    const name = nameDesc.slice(0, separatorIndex).trim().toLowerCase();
    const description = nameDesc.slice(separatorIndex + 1).trim();

    if (!name || !description) {
        console.error(`‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: "${nameDesc}"`);
        process.exit(1);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ options (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const options = optionParts.map((optRaw, i) => {
        const optParts = optRaw.split(':').map(p => p.trim());

        if (optParts.length < 2) {
            console.error(`‚ùå –û—à–∏–±–∫–∞: –£ –æ–ø—Ü–∏–∏ #${i + 1} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: –∏–º—è:–æ–ø–∏—Å–∞–Ω–∏–µ`);
            process.exit(1);
        }

        const [optName, optDesc, optTypeRaw = 'string', optRequiredRaw = 'true', ...extra] = optParts;

        const optType = optionTypeMap[optTypeRaw.toLowerCase()];
        if (!optType) {
            console.error(`‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø—Ü–∏–∏ "${optTypeRaw}". –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: ${Object.keys(optionTypeMap).join(', ')}`);
            process.exit(1);
        }

        const isRequired = optRequiredRaw.toLowerCase() === 'true';

        const option = {
            name: optName.toLowerCase(),
            description: optDesc,
            type: optType,
            required: isRequired,
        };

        extra.forEach((param) => {
            if (param.toLowerCase() === 'autocomplete') {
                option.autocomplete = true;
                return;
            }

            if (param.includes('=')) {
                // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∏–ø–∞ key=value
                const [key, value] = param.split('=').map(s => s.trim());

                if (key === 'min') {
                    if (type === ApplicationCommandOptionType.Integer || type === ApplicationCommandOptionType.Number)
                        option.minValue = parseFloat(value);
                    else
                        option.minLength = parseInt(value);
                } else if (key === 'max') {
                    if (type === ApplicationCommandOptionType.Integer || type === ApplicationCommandOptionType.Number)
                        option.maxValue = parseFloat(value);
                    else
                        option.maxLength = parseInt(value);
                } else {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ choice
                    if (!option.choices) option.choices = [];
                    option.choices.push({ name: value, value: key });
                }
            }
        });

        return option;
    });

    return {
        name,
        description,
        options: options.length > 0 ? options : undefined,
    };
});

const rest = new REST({ version: '10' }).setToken(DISCORD_TOKEN);

(async () => {
    try {
        console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã ${isGlobal ? '–≥–ª–æ–±–∞–ª—å–Ω–æ' : '–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'}:`);

        const route = isGlobal 
            ? Routes.applicationCommands(CLIENT_ID) 
            : Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID);
        await rest.put(route, { body: commands });

        console.log('–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:', error);
    }
})();
